//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace View.CAluno {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CAluno.ICAluno")]
    public interface ICAluno {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAluno/Cadastrar", ReplyAction="http://tempuri.org/ICAluno/CadastrarResponse")]
        bool Cadastrar(Model.ALUNO oAluno);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAluno/Cadastrar", ReplyAction="http://tempuri.org/ICAluno/CadastrarResponse")]
        System.Threading.Tasks.Task<bool> CadastrarAsync(Model.ALUNO oAluno);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAluno/Alterar", ReplyAction="http://tempuri.org/ICAluno/AlterarResponse")]
        bool Alterar(Model.ALUNO oAluno);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAluno/Alterar", ReplyAction="http://tempuri.org/ICAluno/AlterarResponse")]
        System.Threading.Tasks.Task<bool> AlterarAsync(Model.ALUNO oAluno);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAluno/Selecionar", ReplyAction="http://tempuri.org/ICAluno/SelecionarResponse")]
        Model.ALUNO Selecionar(int idAluno);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAluno/Selecionar", ReplyAction="http://tempuri.org/ICAluno/SelecionarResponse")]
        System.Threading.Tasks.Task<Model.ALUNO> SelecionarAsync(int idAluno);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAluno/SelecionarCPF", ReplyAction="http://tempuri.org/ICAluno/SelecionarCPFResponse")]
        Model.ALUNO SelecionarCPF(string CPFAluno);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAluno/SelecionarCPF", ReplyAction="http://tempuri.org/ICAluno/SelecionarCPFResponse")]
        System.Threading.Tasks.Task<Model.ALUNO> SelecionarCPFAsync(string CPFAluno);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAluno/SelecionarNome", ReplyAction="http://tempuri.org/ICAluno/SelecionarNomeResponse")]
        Model.ALUNO SelecionarNome(string Alunome);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAluno/SelecionarNome", ReplyAction="http://tempuri.org/ICAluno/SelecionarNomeResponse")]
        System.Threading.Tasks.Task<Model.ALUNO> SelecionarNomeAsync(string Alunome);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAluno/Deletar", ReplyAction="http://tempuri.org/ICAluno/DeletarResponse")]
        bool Deletar(int IDAluno);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICAluno/Deletar", ReplyAction="http://tempuri.org/ICAluno/DeletarResponse")]
        System.Threading.Tasks.Task<bool> DeletarAsync(int IDAluno);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICAlunoChannel : View.CAluno.ICAluno, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CAlunoClient : System.ServiceModel.ClientBase<View.CAluno.ICAluno>, View.CAluno.ICAluno {
        
        public CAlunoClient() {
        }
        
        public CAlunoClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CAlunoClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CAlunoClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CAlunoClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool Cadastrar(Model.ALUNO oAluno) {
            return base.Channel.Cadastrar(oAluno);
        }
        
        public System.Threading.Tasks.Task<bool> CadastrarAsync(Model.ALUNO oAluno) {
            return base.Channel.CadastrarAsync(oAluno);
        }
        
        public bool Alterar(Model.ALUNO oAluno) {
            return base.Channel.Alterar(oAluno);
        }
        
        public System.Threading.Tasks.Task<bool> AlterarAsync(Model.ALUNO oAluno) {
            return base.Channel.AlterarAsync(oAluno);
        }
        
        public Model.ALUNO Selecionar(int idAluno) {
            return base.Channel.Selecionar(idAluno);
        }
        
        public System.Threading.Tasks.Task<Model.ALUNO> SelecionarAsync(int idAluno) {
            return base.Channel.SelecionarAsync(idAluno);
        }
        
        public Model.ALUNO SelecionarCPF(string CPFAluno) {
            return base.Channel.SelecionarCPF(CPFAluno);
        }
        
        public System.Threading.Tasks.Task<Model.ALUNO> SelecionarCPFAsync(string CPFAluno) {
            return base.Channel.SelecionarCPFAsync(CPFAluno);
        }
        
        public Model.ALUNO SelecionarNome(string Alunome) {
            return base.Channel.SelecionarNome(Alunome);
        }
        
        public System.Threading.Tasks.Task<Model.ALUNO> SelecionarNomeAsync(string Alunome) {
            return base.Channel.SelecionarNomeAsync(Alunome);
        }
        
        public bool Deletar(int IDAluno) {
            return base.Channel.Deletar(IDAluno);
        }
        
        public System.Threading.Tasks.Task<bool> DeletarAsync(int IDAluno) {
            return base.Channel.DeletarAsync(IDAluno);
        }
    }
}
